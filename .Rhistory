# ensure no subtours (arc constraints)
add_constraint(u[i] >= 2, i = 2:liczba_miast) %>%
add_constraint(u[i] - u[j] + 1 >= (liczba_miast - 1) * (1 - x[i, j]), i = 2:liczba_miast, j = 2:liczba_miast)
model
library("ompr.roi")
library("ROI.plugin.glpk")
result <- solve_model(model,   with_ROI(solver = "glpk", verbose = TRUE))
View(Macierz_odleglosci)
View(result)
result
solution <- get_solution(result, x[i, j]) %>%
filter(value > 0)
kable(head(solution, 3))
View(solution)
ggplot(Macierz_odleglosci, aes(x, y)) +
geom_point()
Miasta<- as.data.frame(Macierz_odleglosci)
ggplot(Miasta, aes(x, y)) +
geom_point()
View(Macierz_odleglosci)
ui<- fluidPage(
#Assign Dasbhoard title
titlePanel("COVID19 Analytics"),
# Start:  the First Block
# Sliderinput: select from the date between 01.20.2020
# and 01.04.2020
sliderInput(inputId = "date", "Date:", min =
as.Date("2020-01-20"), max = as.Date("2020-04-01"),
value = as.Date("2020-03-01"), width = "600px"),
# plot leaflet object (map)
leafletOutput(outputId = "distPlot", width = "700px",
height = "300px"),
#End:  the First Block
#Start: the second Block
sidebarLayout(
#Sidebar Panel: the selected country, history and
#whether to plot daily new confirmed cases.
sidebarPanel(
selectInput("selectedcountry", h4("Country"), choices
=list("China","US","United_Kingdom","Italy","France",
"Germany", "Spain"), selected = "US"),
selectInput("selectedhistoricwindow", h4("History"),
choices = list("the past 10 days", "the past 20
days"), selected = "the past 10 days"),
checkboxInput("dailynew", "Daily new infected",
value = TRUE),
width = 3
),
#Main Panel: plot the selected values
mainPanel (
plotOutput(outputId = "Plotcountry", width = "500px",
height = "300px")
)
),
#End: the second Block
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui<- fluidPage(
#Assign Dasbhoard title
titlePanel("COVID19 Analytics"),
sliderInput(inputId = "date", "Date:", min =
as.Date("2020-01-20"), max = as.Date("2020-04-01"),
value = as.Date("2020-03-01"), width = "600px"),
# plot leaflet object (map)
leafletOutput(outputId = "distPlot", width = "700px",
height = "300px"),
sidebarLayout(
#Sidebar Panel: the selected country, history and
#whether to plot daily new confirmed cases.
sidebarPanel(
selectInput("selectedcountry", h4("Country"), choices
=list("China","US","United_Kingdom","Italy","France",
"Germany", "Spain"), selected = "US"),
selectInput("selectedhistoricwindow", h4("History"),
choices = list("the past 10 days", "the past 20
days"), selected = "the past 10 days"),
checkboxInput("dailynew", "Daily new infected",
value = TRUE),
width = 3
),
#Main Panel: plot the selected values
mainPanel (
plotOutput(outputId = "Plotcountry", width = "500px",
height = "300px")
)
),
shinyApp(ui = ui, server = server)
sad
gfhjhgfjfg
ui<- fluidPage(
#Assign Dasbhoard title
titlePanel("COVID19 Analytics"),
# Start:  the First Block
# Sliderinput: select from the date between 01.20.2020
# and 01.04.2020
sliderInput(inputId = "date", "Date:", min =
as.Date("2020-01-20"), max = as.Date("2020-04-01"),
value = as.Date("2020-03-01"), width = "600px"),
# plot leaflet object (map)
leafletOutput(outputId = "distPlot", width = "700px",
height = "300px"),
#End:  the First Block
#Start: the second Block
sidebarLayout(
#Sidebar Panel: the selected country, history and
#whether to plot daily new confirmed cases.
sidebarPanel(
selectInput("selectedcountry", h4("Country"), choices
=list("China","US","United_Kingdom","Italy","France",
"Germany", "Spain"), selected = "US"),
selectInput("selectedhistoricwindow", h4("History"),
choices = list("the past 10 days", "the past 20
days"), selected = "the past 10 days"),
checkboxInput("dailynew", "Daily new infected",
value = TRUE),
width = 3
),
#Main Panel: plot the selected values
mainPanel (
plotOutput(outputId = "Plotcountry", width = "500px",
height = "300px")
)
),
#End: the second Block
)
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
runApp()
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
)
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
)
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
source('~/.active-rstudio-document')
viev(quakes)
view(quakes)
head(quakes)
library(shiny)
library(leaflet)
library(RColorBrewer)
head(quakes)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10
)
)
server <- function(input, output, session) {
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(20.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
})
}
shinyApp(ui, server)
shinyApp(ui, server)
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(30.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(30.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
})
server <- function(input, output, session) {
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(30.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
})
}
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(40.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(110.985842), ~min(50.012100), ~max(50.435947), ~max(18.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(0.985842), ~min(0.012100), ~max(50.435947), ~max(50.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(0.985842), ~min(15.012100), ~max(50.435947), ~max(50.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(0.985842), ~min(15.012100), ~max(50.435947), ~max(70.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(25.012100), ~max(35.435947), ~max(50.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(35.012100), ~max(35.435947), ~max(50.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(35.012100), ~max(35.435947), ~max(60.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(55.012100), ~max(35.435947), ~max(60.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(45.012100), ~max(35.435947), ~max(60.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(15.985842), ~min(45.012100), ~max(35.435947), ~max(55.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(20.985842), ~min(45.012100), ~max(35.435947), ~max(35.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(47.985842), ~min(13.012100), ~max(54.435947), ~max(24.846025))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(13.012100), ~min(47.985842), ~max(24.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(23.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(21.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(24.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(26.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(22.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(14.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(16.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(52.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(53.435947))
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947))
addMarkers(lng=19.768, lat=-51.852, popup="The birthplace of R")
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947)) #Wymiary Polski
addMarkers(lng=19.768, lat=-51.852, popup="The birthplace of R")
})
}
shinyApp(ui, server)
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947)) #Wymiary Polski
addMarkers(lng=19.768, lat=-51.852, popup="The birthplace of R")
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947)) #Wymiary Polski
# addMarkers(lng=19.768, lat=-51.852, popup="The birthplace of R")
})
output$map <- renderLeaflet({
leaflet(Miasta) %>% addTiles() %>%
fitBounds(~min(18.012100), ~min(49.985842), ~max(20.846025), ~max(54.435947)) #Wymiary Polski
# addMarkers(lng=19.768, lat=-51.852, popup="The birthplace of R")
})
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10
)
)
shinyApp(ui, server)
